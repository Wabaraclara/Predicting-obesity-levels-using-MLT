# Predicting-obesity-levels-using-MLT
getwd()
setwd(dirname(file.choose()))
# import the CSV file into a data frame
newobesity<- read.csv(file.choose())
# general checking for missing values
apply(newobesity, MARGIN = 2, FUN = function(x) sum(is.na(x)))
# casewise deletion if necessary
newobesity <- na.omit(newobesity)
# Calculating the BMI for the dataset
newobesity$BMI <- newobesity$Weight / (newobesity$Height ^ 2)
print(newobesity)

# Define the breakpoints for different obesity levels
breakpoints <- c(0, 18.5, 24.9, 29.9, 34.9, 39.9, Inf)

# Define labels for the different obesity levels
labels <- c("Underweight", "Normal weight", "Pre-obesity", "Obesity class I", "Obesity class II", "Obesity class III")

# Create a new column to store obesity levels
newobesity$obesity_level <- cut(newobesity$BMI, breaks = breakpoints, labels = labels, right = FALSE)
# drop column 
newobesity <-newobesity[-5]
newobesity <-newobesity[-9]
newobesity <-newobesity[-15]

# plotting the histogram of age, height, weight and BMI
install.packages("ggplot2")
library(ggplot2)
ggplot(newobesity) + geom_histogram(aes(x=Age), color = 'red', bins=10)
ggplot(newobesity) + geom_histogram(aes(x=Height), color ='blue',bins= 10)
ggplot(newobesity) + geom_histogram(aes(x=Weight), color = 'green', bins=10)
ggplot(newobesity) + geom_histogram(aes(x=BMI), color = 'black', bins=10)

# plotting the histogram of the obesity levels
ggplot(newobesity, aes(x = obesity_level, fill = obesity_level)) +
  geom_bar() +
  coord_flip() +
  scale_fill_manual(values = c("yellow", "limegreen", "green", "skyblue", "darkblue", "blue")) +
  labs(title = "Histogram of Obesity Levels", x = "Obesity Level", y = "Frequency")

#convert the non numeric into numeric variables
newobesity$Gender <- as.numeric(as.factor(newobesity$Gender))
newobesity$FAVC <- as.numeric(as.factor(newobesity$FAVC))
newobesity$CAEC <- as.numeric(as.factor(newobesity$CAEC))
newobesity$SCC <- as.numeric(as.factor(newobesity$SCC))
newobesity$CALC <- as.numeric(as.factor(newobesity$CALC))
newobesity$MTRANS <- as.numeric(as.factor(newobesity$MTRANS))
newobesity$obesity_level <- as.factor(newobesity$obesity_level)
summary(newobesity)

# check to see if the data is on the same scale
boxplot(newobesity[-16])
str(newobesity)
# future scaling of the dataset
newobesity[-16]= scale(newobesity[-16])
boxplot(newobesity[-16])

#correlation matrix
install.packages(corrplot)
library(corrplot)
correlation_matrix <- cor(newobesity[-16])
#plot the correlation matrix using corrplot
corrplot(correlation_matrix, method = 'number', type = "upper", tl.col = "blue", tl.srt = 50)


#Random forest model
library(caret)
library(randomForest)

# Assuming "obesity" is the target variable and other columns are features
X <- newobesity[, -which(names(newobesity) == "obesity_level")]
y <- newobesity$obesity_level

# Using randomForest for Random Forest model
rf_model <- train(X, y, method = "rf")

# 10-fold cross-validation
ctrl <- trainControl(method = "cv", number = 10)
cv_model <- train(X, y, method = "rf", trControl = ctrl)

# Split data into training and testing sets (e.g., 90% training, 10% testing)
set.seed(123) # for reproducibility
train_index <- createDataPartition(y, p = 0.9, list = FALSE)
train_data <- newobesity[train_index, ]
test_data <- newobesity[-train_index, ]

# Fit model on training data
final_model <- train(X[train_index, ], y[train_index], method = "rf", trControl = ctrl)

# Make predictions on test data
predictions <- predict(final_model, newdata = X[-train_index, ])

# Create confusion matrix
confusion_matrix <- confusionMatrix(predictions, test_data$obesity_level, mode = "everything", positive = "obesity_level")
confusion_matrix
